TABULATION = " " * 4


def format_diff(result_diff, indent=1):
    """
    Generate a formatted string representation of the differences between two nested dictionaries
    based on the meta information generated by the compare_dicts function.
    """
    sorted_result = sorted(result_diff, key=lambda x: x["key"])
    result = "{"
    for diff in sorted_result:
        meta, key, value = diff["meta"], diff["key"], diff["value"]
        if meta == "added":
            result += f"\n{TABULATION * indent}+ {key}: {format_value(value, indent)}"
        elif meta == "removed":
            result += f"\n{TABULATION * indent}- {key}: {format_value(value, indent)}"
        elif meta == "changed":
            result += f"\n{TABULATION * indent}- {key}: {format_value(value[0], indent)}"
            result += f"\n{TABULATION * indent}+ {key}: {format_value(value[1], indent)}"
        elif meta == "unchanged":
            result += f"\n{TABULATION * (indent)}  {key}: {format_value(value, indent)}"
        elif meta == "nested":
            result += f"\n{TABULATION * (indent)}{key}: {format_diff(value, indent + 1)}"
    result +=  f"\n{TABULATION * (indent - 1)}" + "}"
    return result


def format_value(value, indent):
    if isinstance(value, dict):
        sub_res = []
        for k, v in value.items():
            if isinstance(v, dict):
                sub_res.append(f"{TABULATION * (indent+1)}{k}: {format_value(v, indent + 1)}")
            else:
                sub_res.append(f"{TABULATION * (indent+1)}{k}: {v}")
        return "{\n" + "\n".join(sub_res) + f"\n{TABULATION * indent}" + "}"
    else:
        if value == True:
            value = 'true'
            return value
        elif value == None:
            value = 'null'
            return value
        else:
            return str(value)